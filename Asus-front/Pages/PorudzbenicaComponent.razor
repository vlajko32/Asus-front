@page "/porudzbenica"
@inject iKupacUseCase kupacUseCase
@inject IJSRuntime JSRuntime
@inject iProizvodUseCase proizvodUseCase
@inject iPorudzbenicaUseCase porudzbenicaUseCase 
@inject iRadnikUseCase radnikUseCase 
 
<h3 style="font-family: 'Comic Sans MS'; font-weight: bold">Unos porudzbenice</h3>

<div class="row g-3" style="margin-right: 7rem; margin-bottom: 2rem; margin-top: 3rem">
    <div class="col-auto" style="width: 35%">
        <div class="mb-3">
            <label for="formGroupExampleInput" class="form-label">Šifra porudzbenice:</label>
            <input type="number" class="form-control" id="formGroupExampleInput" disabled="@izmenaPorudzbenice" @bind-value="SifraPorudzbenice">
        </div>


    </div>
    <div class="col-auto">
        <div class="d-grid gap-2 col-6 mx-auto">
            <button class="btn btn-primary" type="button" style="min-width: 6rem" @onclick="PronadjiPorudzbenicu">Pronadji</button>

        </div>
        <div class="d-grid gap-2 col-6 mx-auto">
            <button class="btn btn-primary" type="button" style="min-width: 6rem" disabled="@(!izmenaPorudzbenice)" @onclick="ObrisiPorudzbenicu">Obriši</button>

        </div>
    </div>
    <div class="col-auto" style="width: 20%; margin-left: 5%">
        <div class="mb-3">
            <label for="formGroupExampleInput" class="form-label">Datum:</label>
            <input type="date" class="form-control" id="formGroupExampleInput" @bind-value="Datum">
        </div>


    </div>
</div>


<div class="row align-items-center" style="margin-left: 1rem; margin-right: 2rem; margin-bottom: 1rem">
    <div class="col">
        <div class="mb-3">
            <label for="formGroupExampleInput" class="form-label">Šifra odg. lica:</label>
            <input type="number" class="form-control" id="formGroupExampleInput" @bind-value="SifraRadnika">
        </div>
    </div>
    <div class="col">
        <div class="mb-3">
            <label for="formGroupExampleInput" class="form-label">PIB kupca:</label>
            <input type="text" class="form-control" id="formGroupExampleInput" @bind-value="PiB">
        </div>


    </div>
    <div class="col">
        <div class="d-grid gap-3 col-9 mx-auto">
            <button class="btn btn-primary" type="button" style="min-width: 6rem" @onclick="PronadjiKupca">Pronadji kupca</button>

        </div>
    </div>

    <div class="col">
        <div class="mb-3">
            <label for="formGroupExampleInput" class="form-label" style="font-weight: bold">Naziv kupca:</label>
            <input type="text" class="form-control" id="formGroupExampleInput" disabled="true" @bind-value="NazivKupca">
        </div>


    </div>

</div>


<div class="card" style="margin-bottom: 5rem; margin-left: 4rem; margin-right: 4rem">
    <div class="card-header">
        <h4 style="margin-left: 4rem">Unos stavki porudzbenice</h4>
    </div>

    <div class="card-body">
        <div class="row align-items-center" style="margin-left: 5rem; margin-right: 2rem; margin-bottom: 3rem">
            <div class="col">
                <div class="mb-3">
                    <label for="formGroupExampleInput" class="form-label">Količina:</label>
                    <input type="number" class="form-control" id="formGroupExampleInput" @bind-value="Kolicina">
                </div>
            </div>
            <div class="col">
                <div class="mb-3">
                    <label for="formGroupExampleInput" class="form-label">ŠifraProizvoda:</label>
                    <input type="number" class="form-control" id="formGroupExampleInput" @bind-value="SifraProizvoda">
                </div>


            </div>
            <div class="col">
                <div class="d-grid gap-3 col-9 mx-auto">
                    <button class="btn btn-primary" type="button" style="min-width: 6rem" @onclick="PronadjiProizvod">Pronadji proizvod</button>

                </div>
            </div>

            <div class="col">
                <div class="mb-3">
                    <label for="formGroupExampleInput" class="form-label" style="font-weight: bold">Naziv modela:</label>
                    <input type="text" class="form-control" id="formGroupExampleInput" disabled="true" @bind-value="NazivModela">
                </div>


            </div>
        </div>

        <div class="row justify-content-end" style="margin-left: 5rem; margin-right: 2rem; margin-bottom: 2rem;">
            
                <button class="btn btn-primary" type="button" style="min-width: 6rem" @onclick="UbaciStavkuPorudzbenice">Ubaci stavku</button>
          

        </div>


        <table class="table table-bordered">
            <thead>
                <tr>
                    <th scope="col">R.b</th>
                    <th scope="col">Šifra proizvoda</th>
                    <th scope="col">Naziv modela</th>
                    <th scope="col">Količina</th>
                    <th scope="col">Izmeni stavku</th>
                    <th scope="col">Obriši stavku</th>

                </tr>
            </thead>
            <tbody>
                @if (stavkePorudzbenice != null)
                {

                    @foreach (var stavka in stavkePorudzbenice)
                    {
                <tr>
                    
                    <StavkaPorudzbeniceComponent stavkaPorudzbenice="stavka" Promeni="PromeniStavku" Obrisi="ObrisiStavku"></StavkaPorudzbeniceComponent>
                </tr> 
                }
                        

                    }

                </tbody>
        </table>
    </div>
</div>

<div class="row justify-content-around" style="margin-bottom: 3rem">
    <div class="col-6">
        <button type="button" class="btn btn-primary" style="min-width:10rem" @onclick="ResetujFormu">Poništi unos</button>
    </div>
    <div class="col-2">
        <button type="button" class="btn btn-primary" style="min-width:10rem" @onclick="UnesiPorudzbenicu">Potvrdi unos</button>
    </div>
</div>


@code {
    private int SifraPorudzbenice;
    private DateTime Datum;

    private string PiB;
    private string NazivKupca;
    private Proizvod proizvod;
    private Kupac kupac;
    private List<StavkaPorudzbenice> stavkePorudzbenice = new List<StavkaPorudzbenice>();
    private Porudzbenica porudzbenica;
    private int SifraRadnika;
    private int SifraProizvoda;
    private string NazivModela;
    private int Kolicina;

    private int Brojac = 0;
    private int menjanjeStavke = 0;
    private List<StavkaPorudzbenice> stavkePorudzbenice2 = new List<StavkaPorudzbenice>();

    private bool izmenaPorudzbenice = false;

    private void PronadjiKupca()
    {

        try
        {
            kupac = kupacUseCase.pronadjiKupca(PiB);
            if (kupac != null)
            {

                NazivKupca = kupac.NazivKupca;
            }
            else
            {
                JSRuntime.InvokeVoidAsync("alertKupacNotExist");
            }
        }
        catch (Exception)
        {

            JSRuntime.InvokeVoidAsync("alertServer");

        }
    }

    private void PronadjiProizvod()
    {
        try
        {
            proizvod = proizvodUseCase.vratiProizvod(SifraProizvoda);
            if (proizvod != null)
            {
                NazivModela = proizvod.NazivModela;
            }
            else
            {
                JSRuntime.InvokeVoidAsync("alertProizvodNotExist");
            }
        }
        catch (Exception)
        {

            JSRuntime.InvokeVoidAsync("alertServer");
        }
    }

    private void UbaciStavkuPorudzbenice()
    {
        if (menjanjeStavke == 0)
        {
            Brojac++;
            StavkaPorudzbenice stavkaPorudzbenice = new StavkaPorudzbenice
            {
                rbStavke = Brojac,
                SifraProizvoda = SifraProizvoda,
                kolicina = Kolicina,
                NazivModela = NazivModela

            };

            stavkePorudzbenice.Add(stavkaPorudzbenice);


        }
        else
        {
            stavkePorudzbenice.FirstOrDefault(st => st.rbStavke == menjanjeStavke).kolicina = Kolicina;
            stavkePorudzbenice.FirstOrDefault(st => st.rbStavke == menjanjeStavke).SifraProizvoda = SifraProizvoda;
            stavkePorudzbenice.FirstOrDefault(st => st.rbStavke == menjanjeStavke).NazivModela = NazivModela;
            menjanjeStavke = 0;

        }
        SifraProizvoda = 0;
        Kolicina = 0;
        NazivModela = "";

    }

    private void UnesiPorudzbenicu()
    {
        if (!Validate())
        {

        }
        else {
            try
            {
                foreach (var stavka in stavkePorudzbenice)
                {
                    StavkaPorudzbenice nova = new StavkaPorudzbenice
                    {
                        kolicina = stavka.kolicina,
                        SifraProizvoda = stavka.SifraProizvoda,

                    };
                    stavkePorudzbenice2.Add(nova);
                }
                porudzbenica = new Porudzbenica
                {
                    porudzbenicaID = SifraPorudzbenice,
                    datumPor = Datum,
                    PiB = PiB,
                    stavkePorudzbenice = stavkePorudzbenice2,
                    sifraRadnika = SifraRadnika
                };
                if (izmenaPorudzbenice)
                {
                    if (porudzbenicaUseCase.izmeniPorudzbenicu(porudzbenica, porudzbenica.porudzbenicaID))
                    {
                        JSRuntime.InvokeVoidAsync("alertPorudzbenicaUpdateSuccess");
                        ResetujFormu();

                    }
                    else
                    {
                        JSRuntime.InvokeVoidAsync("alertServer");

                    }
                }
                else
                {
                    if (porudzbenicaUseCase.kreirajPorudzbenicu(porudzbenica))
                    {
                        JSRuntime.InvokeVoidAsync("alertPorudzbenicaSuccess");
                        ResetujFormu();

                    }
                    else
                    {
                        JSRuntime.InvokeVoidAsync("alertServer");

                    }
                }
                SifraPorudzbenice = 0;
                SifraRadnika = 0;
                stavkePorudzbenice.Clear();
                stavkePorudzbenice2.Clear();
                NazivKupca = "";
                PiB = "";
            }
            catch (Exception)
            {

                JSRuntime.InvokeVoidAsync("alertServer");
            }
        }
    }


    private void PronadjiPorudzbenicu()
    {
        try
        {
            if(SifraPorudzbenice!=0)
                if ((porudzbenica = porudzbenicaUseCase.vratiPorudzbenicu(SifraPorudzbenice)) != null)
                {
                    SifraRadnika = porudzbenica.sifraRadnika;
                    Datum = porudzbenica.datumPor;
                    PiB = porudzbenica.PiB;

                    kupac = kupacUseCase.pronadjiKupca(PiB);
                    NazivKupca = kupac.NazivKupca;
                    stavkePorudzbenice2 = porudzbenica.stavkePorudzbenice;
                    Brojac = 0;
                    foreach (var stavka in stavkePorudzbenice2)
                    {
                        Brojac++;
                        StavkaPorudzbenice novaStavka = new StavkaPorudzbenice
                        {
                            NazivModela = proizvodUseCase.vratiProizvod(stavka.SifraProizvoda).NazivModela,
                            kolicina = stavka.kolicina,
                            SifraProizvoda = stavka.SifraProizvoda,
                            rbStavke = Brojac
                        };

                        stavkePorudzbenice.Add(novaStavka);

                    }
                    izmenaPorudzbenice = true;
                }
                else
                {
                    JSRuntime.InvokeVoidAsync("alertPorudzbenicaNotExist");

                }
        }
        catch (Exception)
        {

            JSRuntime.InvokeVoidAsync("alertServer");
        }
    }

    private void PromeniStavku(StavkaPorudzbenice stavka)
    {
        menjanjeStavke = stavka.rbStavke;
        Kolicina = stavka.kolicina;
        SifraProizvoda = stavka.SifraProizvoda;
        NazivModela = stavka.NazivModela;
    }
    private void ObrisiStavku(StavkaPorudzbenice stavka)
    {
        stavkePorudzbenice.Remove(stavka);
        Brojac = 0;
        foreach(var stavkaPor in stavkePorudzbenice)
        {
            Brojac++;
            stavkaPor.rbStavke = Brojac;

        }

    }

    private void ResetujFormu()
    {
        SifraPorudzbenice = 0;

        PiB="";
        NazivKupca ="";
        proizvod = null;
        kupac = null;
        stavkePorudzbenice.Clear();
        Porudzbenica porudzbenica;
        SifraRadnika=0;
        SifraProizvoda =0;
        NazivModela = "";
        Kolicina = 0;

        Brojac = 0;
        menjanjeStavke = 0;
        stavkePorudzbenice2.Clear();

        izmenaPorudzbenice = false;

    }

    private void ObrisiPorudzbenicu()
    {
        try
        {
            if (porudzbenicaUseCase.obrisiPorudzbenicu(SifraPorudzbenice))
            {
                JSRuntime.InvokeVoidAsync("alertPorudzbenicaDeleteSuccess");
                ResetujFormu();
            }
            else
            {
                JSRuntime.InvokeVoidAsync("alertServer");
            }
        }
        catch (Exception)
        {

            JSRuntime.InvokeVoidAsync("alertServer");
        }
    }

    private bool Validate()
    {
        if (SifraPorudzbenice == 0 || stavkePorudzbenice.Count == 0 || Datum == null || SifraRadnika == 0 || kupac == null)
        {
            JSRuntime.InvokeVoidAsync("alertValidatePorudzbenica");

            return false;
        }
        else if(radnikUseCase.PronadjiRadnika(SifraRadnika)==null)
        {
            JSRuntime.InvokeVoidAsync("alertRadnikNotExist");

            return false;
        }
        else
            return true;
    }
}
